{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome To DirectDrop","text":"<p>Welcome to DirectDrop, a secure P2P File Sharing Application</p>"},{"location":"alembicsetup/","title":"Tracking the changes with Alembic","text":""},{"location":"alembicsetup/#using-alembic-for-database-migrations","title":"Using Alembic for Database Migrations","text":"<p>Alembic is a lightweight database migration tool used with SQLAlchemy to track changes in your database schema. It allows you to create migrations to reflect changes in your Python models and apply those migrations to your database.</p>"},{"location":"alembicsetup/#set-up-for-alembic-to-keep-track-on-your-changes","title":"Set up for Alembic to keep track on your changes","text":"<p>1.If you do not have Alembic installed or skipped the requirements.txt by some chance, Run this :</p> <pre><code>\npip install alembic\n\n</code></pre> <p>2.Run <code>alembic upgrade head</code> to upgrade the migration to the latest changes</p>"},{"location":"databasesetup/","title":"Database Setup","text":""},{"location":"databasesetup/#explanation","title":"Explanation","text":"<p>1.Imports</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\nimport os\n\n</code></pre> <ul> <li><code>create_engine</code>: Creates a new SQLAlchemy engine instance that is responsible for connecting to the database.</li> <li><code>declarative_base</code>: Provides a base class for your ORM models.</li> <li><code>sessionmaker</code>: A factory that creates new session objects to interact with the database.</li> <li><code>os</code>: Used to manipulate file paths for database URL configuration.</li> </ul> <p>2.The Base Directory</p> <pre><code>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n</code></pre> <ul> <li>This line checks the base directory of the project. <code>os.path.dirname()</code> moves up one directory from the current file's location.</li> <li>The <code>BASE_DIR</code> will be used to ensure the SQLite database file is created in the correct location relative to the project structure.</li> </ul> <p>3.Database URL Configuration (<code>SQLALCHEMY_DATABASE_URL</code>):</p> <pre><code>SQLALCHEMY_DATABASE_URL = f\"sqlite:///{os.path.join(BASE_DIR, 'DirectDrop.db')}\"\n\n</code></pre> <ul> <li><code>sqlite:///{os.path.join(BASE_DIR, 'DirectDrop.db')}</code>: This constructs the SQLite database URL. It's an absolute path pointing to the <code>DirectDrop.db</code> file located in the <code>BASE_DIR</code> directory.</li> <li>SQLAlchemy uses this URL to connect to the SQLite database.</li> </ul> <p>4.Creating the SQLAlchemy Engine:</p> <pre><code>engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})\n\n</code></pre> <ul> <li><code>create_engine()</code>: This function creates a new SQLAlchemy engine instance. The engine is responsible for managing the database connection.</li> <li><code>connect_args={\"check_same_thread\": False}</code>: This argument is specific to SQLite, which has a threading limitation (it doesn't allow connections to be used in different threads by default). Setting <code>check_same_thread</code> to <code>False</code> allows the connection to be shared across threads, which is necessary when using SQLite with FastAPI in async mode.</li> </ul> <p>5.Session Factory (<code>SessionLocal</code>):</p> <pre><code>SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n</code></pre> <ul> <li><code>sessionmaker()</code>: This is a factory that generates new <code>Session</code> objects. These <code>Session</code> objects are used to interact with the database.</li> <li><code>autocommit=False</code>: Disables automatic transaction commits. You must explicitly call <code>commit()</code> when you're ready to save changes to the database.</li> <li><code>autoflush=False</code>: Prevents automatic flushing of changes to the database. SQLAlchemy will only flush data to the database when explicitly told to, such as during a commit or when you query the database.</li> <li><code>bind=engine</code>: Binds the session factory to the <code>engine</code>, ensuring that all sessions created by this factory will use the same database connection.</li> </ul> <p>6.Base Class for Models (<code>Base</code>):</p> <pre><code>Base = declarative_base()\n\n</code></pre> <ul> <li><code>declarative_base()</code>: This function returns a base class that your ORM models will inherit from. All models (tables) defined in your application will be subclasses of this <code>Base</code> class. It acts as the foundation for model declarations, linking the Python classes to database tables.</li> </ul> <p>7.Dependency for Database Session (<code>get_db</code>):</p> <pre><code>def get_db():\ndb = SessionLocal()\ntry:\n    yield db\nfinally:\n    db.close()\n\n</code></pre> <ul> <li><code>get_db()</code>: This is a dependency function that provides a database session for use in your FastAPI route handlers.<ul> <li><code>SessionLocal()</code>: Creates a new session object for interacting with the database.</li> <li><code>yield db</code>: This makes the session available within the context of the function where it\u2019s used (i.e., within a request).</li> <li><code>finally: db.close()</code>: Ensures that the session is closed when the request is finished. This prevents database connections from being left open.</li> </ul> </li> </ul>"},{"location":"databasesetup/#reference-links","title":"Reference Links","text":"<ul> <li>SQLAlchemy Documentation</li> <li>FastAPI - SQL (Relational) Databases</li> <li>Declarative Base</li> <li>Session Basics in SQLAlchemy</li> </ul>"},{"location":"divingthebackend/","title":"Diving into the <code>main.py</code> in FastAPI Backend","text":"<ol> <li><code>FastAPI</code>:<ul> <li>A modern, fast and high-performance web framework for building APIs with Python 3.7+ based on standard Python type hints.</li> </ul> </li> <li><code>user_auth</code>:<ul> <li>This module contains authentication-related routes. <code>user_auth.router</code> adds the <code>login</code> and <code>register</code> routes that handle user authentication and authorization.</li> </ul> </li> <li><code>engine</code>:<ul> <li>This refers to a database engine, set up using SQLAlchemy or another ORM (Object-Relational Mapper). It connects your app to the database.</li> </ul> </li> </ol>"},{"location":"divingthebackend/#code-breakdown","title":"Code Breakdown:","text":"<ol> <li><code>from fastapi import FastAPI</code>:<ul> <li>Imports the FastAPI class from the FastAPI framework, which is used to create the app.</li> </ul> </li> <li><code>from app.auth import user_auth</code>:<ul> <li>Imports <code>user_auth</code>, a module that likely contains authentication logic. The <code>.router</code> within this module will have a series of routes related to user authentication.</li> </ul> </li> <li><code>from app.database.db import engine</code>:<ul> <li>Imports the <code>engine</code> object from the <code>db</code> module inside the <code>database</code> directory. The engine connects to the database and allows the application to execute queries.</li> </ul> </li> <li><code>app = FastAPI()</code>:<ul> <li>Initializes the FastAPI app instance. This is the main application object that defines your API's behavior.</li> </ul> </li> <li><code>app.include_router(user_auth.router)</code>:<ul> <li>This includes the routes defined in <code>user_auth.router</code> (authentication routes for login and register) in the main FastAPI app. The routes will be accessible under the <code>app</code>.</li> </ul> </li> <li><code>@app.get('/')</code>:<ul> <li>This is a route decorator that defines a GET endpoint at the root URL (<code>/</code>). When users visit the base URL (e.g., <code>http://localhost:8000/</code>), this route will return a welcome message.</li> </ul> </li> <li><code>def root() [For Demoonstration Purposes]:</code>:<ul> <li>This is the function that handles requests to the root URL. It returns a JSON object with a message about the app's upcoming release.</li> </ul> </li> </ol>"},{"location":"features/","title":"Key Features","text":""},{"location":"features/#features","title":"Features","text":"<ul> <li>Decentralized Architecture: Enables direct file sharing between peers without a central server.</li> <li>End-to-End Encryption: Protects data during transmission using robust encryption methods.</li> <li>User Authentication: Secure user verification with JWT and OAuth2 Authentication.</li> <li>Profile Management: Users can manage their profiles and settings.</li> <li>Real-time File Transfer: Efficient file sharing with progress tracking and notifications.</li> <li>Role-Based Access Control: Manage permissions for shared files.</li> <li>Responsive UI: Built with React and ChakraUI for a seamless user experience across devices.</li> </ul>"},{"location":"features/#technologies-used","title":"Technologies Used","text":"<ul> <li>Frontend: React.js, ChakraUI, Redux, Axios</li> <li>Backend: FastAPI, Celery, Redis, PostgreSQL, Postman</li> <li>Database and ORM: PostgreSQL, SQLAlchemy</li> <li>Others: Docker, Docker Compose, Nginx, GitHub Actions</li> </ul>"},{"location":"features/#architecture","title":"Architecture","text":"<pre><code>[Frontend (React + ChakraUI)] &lt;--&gt; [FastAPI Backend] &lt;--&gt; [PostgreSQL Database]\n                                       |\n                                       --&gt; [Celery Workers] &lt;--&gt; [Redis]\n</code></pre>"},{"location":"features/#breakdown","title":"Breakdown","text":"<ul> <li>Frontend: Handles user interactions and communicates with the backend via RESTful APIs.</li> <li>Backend: Manages business logic, authentication, and API endpoints.</li> <li>Celery &amp; Redis: Handle asynchronous tasks such as file processing and sending email notifications.</li> <li>Database: Stores user data, file metadata, and other persistent information.</li> </ul>"},{"location":"gettingstarted/","title":"Instructions","text":""},{"location":"gettingstarted/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following installed on your system:</p> <ul> <li>Python</li> <li>Node.js</li> <li>PostgreSQL</li> <li>Redis</li> <li>Docker &amp; Docker Compose (optional, for containerization)</li> </ul>"},{"location":"gettingstarted/#instructions-for-setting-up-locally","title":"Instructions for setting up locally","text":""},{"location":"gettingstarted/#backend-setup-fastapi","title":"Backend Setup (FastAPI)","text":"<ol> <li> <p>Clone the Repository:</p> <p><code>git clone https://github.com/eugeneanokye99/directdrop.git</code> <code>cd your-cloned-repo</code></p> </li> <li> <p>Set Up Virtual Environment:</p> <p><code>python3 -m venv venv source venv/bin/activate</code></p> </li> <li> <p>Install Dependencies:</p> <p><code>pip install -r requirements.txt</code></p> </li> <li> <p>Navigate to Backend Directory:</p> <p><code>cd Backend/app</code></p> </li> <li> <p>Run Database Migrations:</p> <p><code>alembic upgrade head</code></p> </li> <li> <p>Start the backend server with FastAPI CLI:</p> <p><code>fastapi run dev</code></p> </li> <li> <p>View the endpoints with Postman(Optional, but recommended):</p> <p><code>http://localhost:8000</code></p> </li> </ol>"},{"location":"gettingstarted/#frontend-setup-react-with-chakraui-and-tailwindcss","title":"Frontend Setup (React with ChakraUI and TailwindCSS)","text":"<ol> <li> <p>Navigate to Frontend Directory:</p> <p><code>cd Frontend/directdrop</code></p> </li> <li> <p>Install Dependencies:</p> <p><code>npm install</code></p> </li> <li> <p>Start the frontend server with Vite:</p> <p><code>npm run dev</code></p> </li> </ol>"},{"location":"gettingstarted/#asynchronous-tasks-celery-redis","title":"Asynchronous Tasks (Celery &amp; Redis)","text":"<ol> <li> <p>Ensure Redis is Running:</p> <p><code>docker run -d -p 6379:6379 redis</code> or  <code>redis-cli</code></p> </li> <li> <p>Start Celery Worker:</p> <p><code>celery -A your_project worker - --loglevel=info</code> ```</p> </li> </ol>"},{"location":"gettingstarted/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the root directory and configure the necessary variables. You can use <code>.env</code> as a template.</p> <p>Variables used in this project in the <code>.env</code> file are given below:</p> <pre><code>\nSECRET_KEY=40ed6d187870438c4bf02ed014293b3df00e15888ae915f615ae183b0fb6e7af\n\n\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>Welcome to the Secure P2P File Sharing Application!  This project facilitates decentralized and secure file sharing  between users, ensuring data confidentiality, integrity, and privacy.  Built with a modern tech stack, it leverages React for the frontend, FastAPI for the backend,  and incorporates Celery and Redis for asynchronous task management. </p>"},{"location":"models/","title":"Database Models","text":""},{"location":"models/#imports","title":"Imports","text":"<pre><code>\nfrom app.database.db import Base\nfrom sqlalchemy.sql.expression import text\nfrom sqlalchemy import Column, Integer, String, Boolean, DateTime\nfrom sqlalchemy.sql.sqltypes import TIMESTAMP\nfrom datetime import datetime\n\n</code></pre> <p>1.<code>from app.database.db import Base</code></p> <ul> <li><code>Base</code> is the declarative base class imported from the database setup (usually defined in your <code>db.py</code>). It serves as the foundation for all ORM models.</li> <li>Every model you define will inherit from this <code>Base</code> class. This allows SQLAlchemy to know that this class should be treated as a database table.</li> </ul> <p>2.<code>from sqlalchemy.sql.expression import text</code></p> <ul> <li><code>text</code> is a SQL expression constructor from SQLAlchemy that allows you to write raw SQL. In the case of the <code>User</code> model, it is used to set a default value (e.g., <code>CURRENT_TIMESTAMP</code>) for the <code>created_at</code> column.</li> </ul> <p>3.<code>from sqlalchemy import Column, Integer, String, Boolean, DateTime</code></p> <ul> <li>These are basic data types and column definitions that help SQLAlchemy define the schema of your database tables:<ul> <li><code>Column</code>: Defines a column in the database.</li> <li><code>Integer</code>: Defines an integer column (e.g., for primary keys or IDs).</li> <li><code>String</code>: Defines a string column, typically used for text fields like names and emails.</li> <li><code>Boolean</code>: Defines a boolean column for storing <code>True</code>/<code>False</code> values, such as flags like <code>is_verified</code> and <code>is_admin</code>.</li> <li><code>DateTime</code>: Defines a column that stores date and time values.</li> </ul> </li> </ul> <p>4.<code>from sqlalchemy.sql.sqltypes import TIMESTAMP</code></p> <ul> <li><code>TIMESTAMP</code> is used to store time-based information in the database, often used for columns like <code>created_at</code> that track when a row is created.</li> </ul> <p>5.<code>from datetime import datetime</code></p> <ul> <li><code>datetime</code> is a built-in Python library used to manipulate date and time objects. Although not directly used in the model shown, it's typically used for setting or manipulating date values.</li> </ul>"},{"location":"models/#the-user-model","title":"The <code>User</code> Model","text":"<pre><code>\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, nullable=False)\n    first_name = Column(String, unique=True, nullable=False)\n    last_name = Column(String, unique=True, nullable=False)\n    password = Column(Integer, nullable=False)\n    email = Column(String, unique=True, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('CURRENT_TIMESTAMP'))\n    is_verified = Column(Boolean, server_default='FALSE', nullable=False)\n    is_admin = Column(Boolean, server_default='FALSE', nullable=False)\n\n</code></pre> <p>Model Explanation:</p> <p>1.<code>__tablename__ = \"users\"</code>:     - Defines the name of the table as <code>\"users\"</code> in the database.</p> <p>2.<code>id = Column(Integer, primary_key=True, nullable=False)</code>:     - <code>id</code> is the primary key of the table, and it cannot be <code>NULL</code>. It uniquely identifies each row in the table.</p> <p>3.<code>first_name = Column(String, unique=True, nullable=False)</code>:     - Stores the first name of the user as a string. It is unique (no two users can have the same first name) and cannot be <code>NULL</code>.</p> <p>4.<code>last_name = Column(String, unique=True, nullable=False)</code>:     - Stores the last name of the user, similar to <code>first_name</code>, with the same constraints.</p> <p>5.<code>password = Column(Integer, nullable=False)</code>:     - Stores the user's password as an integer. While this is defined as an integer, it's not ideal for storing passwords (normally hashed strings are recommended).</p> <p>6.<code>email = Column(String, unique=True, nullable=False)</code>:     - Stores the user\u2019s email address. It is unique and must not be <code>NULL</code>. Email addresses should always be unique for users to ensure proper authentication.</p> <p>7.<code>created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('CURRENT_TIMESTAMP'))</code>:     - This column stores the timestamp of when the user was created. The <code>server_default=text('CURRENT_TIMESTAMP')</code> ensures that the database automatically sets the value to the current time when the user is created.</p> <p>8.<code>is_verified = Column(Boolean, server_default='FALSE', nullable=False)</code>:     - Stores whether the user is verified. By default, it is set to <code>FALSE</code>, meaning that when a user is created, they are not verified.</p> <p>9.<code>is_admin = Column(Boolean, server_default='FALSE', nullable=False)</code>:     - Stores whether the user has admin privileges. By default, it is also set to <code>FALSE</code>.</p>"},{"location":"overview/","title":"The Overview","text":"<p>Welcome to the Secure P2P File Sharing Application!  This project facilitates decentralized and secure file sharing between users,  ensuring data confidentiality, integrity, and privacy. Built with a modern tech stack,  it leverages React and ChakraUI for the frontend, FastAPI for the backend, and incorporates  Celery and Redis for asynchronous task management.</p>"}]}